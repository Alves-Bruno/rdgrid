* Create a dynamic grid 
** Load libs and compile C++ code
#+begin_src R :results output :exports both :session *R-local*
options(crayon.enabled=FALSE)
library(tidyverse)
library(Rcpp)
sourceCpp("../rdgrid.cpp")
#+end_src

#+RESULTS:

** Create points 
#+begin_src R :results output :exports both :session *R-local*
tibble(
  x=c(1, 2, 4, 3, 7, 6),
  y=c(4, 1, 4, 7, 6, 9)
) -> a.points

a.points 

tibble(
  x=c(4, 6),
  y=c(4, 3)
) -> a.points.txrx

a.points.txrx

tibble(
  x=c(1, 3, 6, 8, 9),
  y=c(4, 7, 3, 2, 2.5)
) -> b.points

b.points 

tibble(
  x=c(4, 8),
  y=c(4, 3)
) -> b.points.txrx

b.points.txrx
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 6 × 2
      x     y
  <
<dbl>
1     1     4
2     2     1
3     4     4
4     3     7
5     7     6
6     6     9
# A tibble: 2 × 2
      x     y
  <
<dbl>
1     4     4
2     6     3
# A tibble: 5 × 2
      x     y
  <
<dbl>
1     1   4  
2     3   7  
3     6   3  
4     8   2  
5     9   2.5
# A tibble: 2 × 2
      x     y
  <
<dbl>
1     4     4
2     8     3
#+end_example

** Call dgrid_create for A and B
#+begin_src R :results output :exports both :session *R-local*
max_N <- 2
dgrid_create(
  max_N, 
  0,0,10,10, # The main quad
  a.points.txrx$x, a.points.txrx$y, 
  a.points$x, a.points$y, 
  "./A"
)

dgrid_create(
  max_N, 
  0,0,10,10, # The main quad
  b.points.txrx$x, b.points.txrx$y, 
  b.points$x, b.points$y, 
  "./B"
)
#+end_src

#+RESULTS:

* Compose grids 
** Call dgrid_compose
#+begin_src R :results output :exports both :session *R-local*
dgrid_compose("./A", "./B", "./composed")
#+end_src

#+RESULTS:
** Call dgrid2table
#+begin_src R :results output :exports both :session *R-local*
dgrid2table("./A") %>% 
  as_tibble() -> a.grid
a.grid 

dgrid2table("./B") %>% 
  as_tibble() -> b.grid
b.grid 

dgrid2table("./composed") %>% 
  as_tibble() -> comp.grid
comp.grid
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 15 × 6
    xmin  ymin  xmax  ymax     N  type
   <
<
<
<
<
<dbl>
 1   0     0     2.5   2.5     1     0
 2   2.5   0     5     2.5     0     0
 3   0     2.5   2.5   5       1     0
 4   2.5   2.5   5     5       1     0
 5   5     0    10     5       0     0
 6   0     5     5    10       1     0
 7   5     5    10    10       2     0
 8   2     1     0     0       0     1
 9   1     4     0     0       0     1
10   4     4     0     0       0     1
11   3     7     0     0       0     1
12   7     6     0     0       0     1
13   6     9     0     0       0     1
14   4     4     0     0       0     2
15   6     3     0     0       0     2
# A tibble: 14 × 6
    xmin  ymin  xmax  ymax     N  type
   <
<
<
<
<
<dbl>
 1   0     0     5     5       1     0
 2   5     0     7.5   2.5     0     0
 3   7.5   0    10     2.5     2     0
 4   5     2.5   7.5   5       1     0
 5   7.5   2.5  10     5       0     0
 6   0     5     5    10       1     0
 7   5     5    10    10       0     0
 8   1     4     0     0       0     1
 9   8     2     0     0       0     1
10   9     2.5   0     0       0     1
11   6     3     0     0       0     1
12   3     7     0     0       0     1
13   4     4     0     0       0     2
14   8     3     0     0       0     2
# A tibble: 21 × 6
    xmin  ymin  xmax  ymax     N  type
   <
<
<
<
<
<dbl>
 1   0     0     2.5   2.5     1     0
 2   2.5   0     5     2.5     0     0
 3   0     2.5   2.5   5       1     0
 4   2.5   2.5   5     5       1     0
 5   5     0     7.5   2.5     0     0
 6   7.5   0    10     2.5     2     0
 7   5     2.5   7.5   5       0     0
 8   7.5   2.5  10     5       0     0
 9   0     5     5    10       1     0
10   5     5    10    10       2     0
# … with 11 more rows
#+end_example

* Show grids with ggplot
** A grid 
#+begin_src R :results output file graphics :file (concat "./image-" (replace-regexp-in-string " " "_" (nth 4 (org-heading-components))) ".png") :exports both :width 600 :height 400 :session *R-local*
a.grid %>%
  ggplot() + 
  geom_rect(
    data=.%>% filter(type==0),
    aes(
      xmin = xmin, xmax = xmax,
      ymin = ymin, ymax = ymax,
      fill=as.factor(N)
    ), color="black"
  ) +
  labs(x="X", y="Y",fill="# Triangles") + 
  geom_point(data=.%>% filter(type==2), aes(x=xmin, y=ymin), shape=9, size=3) + 
  geom_point(data=.%>% filter(type==1), aes(x=xmin, y=ymin))+
  theme_bw(base_size=16)
#+end_src

#+RESULTS:
[[file:./image-A_grid.png]]

** B grid 
#+begin_src R :results output file graphics :file (concat "./image-" (replace-regexp-in-string " " "_" (nth 4 (org-heading-components))) ".png") :exports both :width 600 :height 400 :session *R-local*
b.grid %>%
  ggplot() + 
  geom_rect(
    data=.%>% filter(type==0),
    aes(
      xmin = xmin, xmax = xmax,
      ymin = ymin, ymax = ymax,
      fill=as.factor(N)
    ), color="black"
  ) +
  labs(x="X", y="Y",fill="# Triangles") + 
  geom_point(data=.%>% filter(type==2), aes(x=xmin, y=ymin), shape=9, size=3) + 
  geom_point(data=.%>% filter(type==1), aes(x=xmin, y=ymin))+
  theme_bw(base_size=16)
#+end_src

#+RESULTS:
[[file:./image-B_grid.png]]

** Composed grid 
#+begin_src R :results output file graphics :file (concat "./image-" (replace-regexp-in-string " " "_" (nth 4 (org-heading-components))) ".png") :exports both :width 600 :height 400 :session *R-local*
comp.grid %>%
  ggplot() + 
  geom_rect(
    data=.%>% filter(type==0),
    aes(
      xmin = xmin, xmax = xmax,
      ymin = ymin, ymax = ymax,
      fill=as.factor(N)
    ), color="black"
  ) +
  labs(x="X", y="Y",fill="# Triangles") + 
  geom_point(data=.%>% filter(type==2), aes(x=xmin, y=ymin), shape=9, size=3) + 
  geom_point(data=.%>% filter(type==1), aes(x=xmin, y=ymin))+
  theme_bw(base_size=16)
#+end_src

#+RESULTS:
[[file:./image-Composed_grid.png]]
* Get dgrid depth
#+begin_src R :results output :exports both :session *R-local*
dgrid_depth("./A")
dgrid_depth("./B")
dgrid_depth("./composed")
#+end_src

#+RESULTS:
: [1] 6
: [1] 5
: [1] 8

